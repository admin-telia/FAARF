from odoo import fields, models, api


class CreditCompteEXploit(models.Model):
    """ """
    _name = "credit_compte_exploitation"
    _description = ""
    _inherit = ['mail.thread', 'mail.activity.mixin']

    name = fields.Many2one('credit_client_membre', string='Membre', required=False)
    secteur_activite = fields.Many2one("credit_activite", string="Secteur d'activité", required=False)
    rythme_production = fields.Selection(string='Rythme de production',
                                         selection=[('1', 'Mensuel'), ], required=False, )
    date_ets = fields.Date(string='Date', required=False, default=fields.Date.context_today)
    duree = fields.Integer(string='Durée', required=False)
    credit_id = fields.Many2one('credit_credit', string='Credit', required=False)
    type_client_code = fields.Char("code", related="credit_id.type_client_code")

    achat_ids = fields.One2many('credit_compte_exploi_ach', inverse_name='compte_exploit', string='Achats et services', required=False)
    transport_ids = fields.One2many('credit_compte_exploi_trans', inverse_name='compte_exploit', string='Transports', required=False)
    amortissement_ids = fields.One2many('credit_compte_exploi_amort', inverse_name='compte_exploit', string='Amortissements', required=False)
    impot_ids = fields.One2many('credit_compte_exploi_impot', inverse_name='compte_exploit', string='Impôts et taxes', required=False)
    frais_ids = fields.One2many('credit_compte_exploi_frais', inverse_name='compte_exploit', string='Frais financiers', required=False)
    vente_ids = fields.One2many('credit_compte_exploi_vte', inverse_name='compte_exploit', string='Ventes de la période', required=False)

    sous_total_charge = fields.Float(string='Sous total', required=False, )
    total_charge = fields.Float(string='Total charge', required=False, digits=(16, 0),
                                   compute="calcul_total_charge", store=True)
    total_produit = fields.Float(string='Total produit', required=False, digits=(16, 0),
                                   compute="calcul_total_produit", store=True)

    benefice = fields.Float(string='Bénéfice', required=False, digits=(16, 0),
                                   compute="calcul_benefice", store=True)
    charge_familiales = fields.Float(string='Charges familiales', required=False, digits=(16, 0))
    capacite_rembourssement = fields.Float(string='Capacité de remboursement', required=False,digits=(16, 0),
                                   compute="calcul_capacite_rembourssement", store=True)
    echeance_mensuelle = fields.Float(string='Echéance mensuelle', required=False, digits=(16, 0))
    ratio_rentabilite = fields.Float(string='Ratio de rentabilité', required=False,
                                   compute="calcul_ratio_rentabilite", store=True)

    def set_validate(self):
        pass

    @api.onchange('name')
    def on_change_cliente_id(self):
        # self.client_id = self.credit_id.cliente_id
        return {'domain':
                    {'name': [('id', 'in', self.credit_id.cliente_id.membre_ids.ids)]},
                }

    @api.depends('achat_ids', 'transport_ids', 'amortissement_ids', 'impot_ids', 'frais_ids')
    def calcul_total_charge(self):
        for val in self:
            somme = 0
            for l in self.achat_ids:
                somme = somme + l['montant']
            for l in self.transport_ids:
                somme = somme + l['montant']
            for l in self.amortissement_ids:
                somme = somme + l['montant']
            for l in self.impot_ids:
                somme = somme + l['montant']
            for l in self.frais_ids:
                somme = somme + l['montant']

            val.total_charge = somme

    @api.depends('vente_ids')
    def calcul_total_produit(self):
        for val in self:
            somme = 0
            for l in self.vente_ids:
                somme = somme + l['montant']

            val.total_produit = somme

    @api.depends('total_produit', 'total_charge')
    def calcul_benefice(self):
        for val in self:
            val.benefice = val.total_produit - val.total_charge

    @api.depends('benefice', 'charge_familiales')
    def calcul_capacite_rembourssement(self):
        for val in self:
            val.capacite_rembourssement = val.benefice - val.charge_familiales

    @api.depends('capacite_rembourssement', 'echeance_mensuelle')
    def calcul_ratio_rentabilite(self):
        for val in self:
            if val.echeance_mensuelle:
                print(val.capacite_rembourssement)
                print(val.echeance_mensuelle)
                print(val.capacite_rembourssement / val.echeance_mensuelle)
                r = val.capacite_rembourssement / val.echeance_mensuelle
                print(round(r))
                val.ratio_rentabilite = val.capacite_rembourssement / val.echeance_mensuelle
            else:
                val.ratio_rentabilite = 0

class CreditCompteExploitAchat(models.Model):
    """ """
    _name = "credit_compte_exploi_ach"
    _description = ""

    libelle_id = fields.Many2one('credit_compte_exploi_ach_vte_lib', string='Libellé', required=False)
    quantite = fields.Integer(string='Qte', required=False)
    prix_unite = fields.Float(string='Pu', required=False, digits=(16, 0))
    montant = fields.Float(string='Montant', required=False, compute="calcul_montant", digits=(16, 0))

    compte_exploit = fields.Many2one('credit_compte_exploitation', string='Compte exploitation', required=False)

    @api.depends('quantite', 'prix_unite')
    def calcul_montant(self):
        for val in self:
            val.montant = val.quantite * val.prix_unite

class CreditCompteExploitVente(models.Model):
    """ """
    _name = "credit_compte_exploi_vte"
    _description = ""

    libelle_id = fields.Many2one('credit_compte_exploi_ach_vte_lib', string='Libellé', required=False)
    quantite = fields.Integer(string='Qte', required=False)
    prix_unite = fields.Float(string='Pu', required=False, digits=(16, 0))
    montant = fields.Float(string='Montant', required=False, compute="calcul_montant", digits=(16, 0))

    compte_exploit = fields.Many2one('credit_compte_exploitation', string='Compte exploitation', required=False)

    @api.depends('quantite', 'prix_unite')
    def calcul_montant(self):
        for val in self:
            val.montant = val.quantite * val.prix_unite

class CreditCompteExploitAchatVenteLib(models.Model):
    """ """
    _name = "credit_compte_exploi_ach_vte_lib"
    _description = ""

    name = fields.Char(string='Libellé', required=False)


class CreditCompteExploitTransport(models.Model):
    """ """
    _name = "credit_compte_exploi_trans"
    _description = ""

    libelle_id = fields.Many2one('credit_compte_exploi_trans_lib', string='Libellé', required=False)
    quantite = fields.Integer(string='Qte', required=False)
    prix_unite = fields.Float(string='Pu', required=False, digits=(16, 0))
    montant = fields.Float(string='Montant', required=False, compute="calcul_montant", digits=(16, 0))

    compte_exploit = fields.Many2one('credit_compte_exploitation', string='Compte exploitation', required=False)

    @api.depends('quantite', 'prix_unite')
    def calcul_montant(self):
        for val in self:
            val.montant = val.quantite * val.prix_unite

class CreditCompteExploitTransportLib(models.Model):
    """ """
    _name = "credit_compte_exploi_trans_lib"
    _description = ""

    name = fields.Char(string='Libellé', required=False)


class CreditCompteExploitAmortissement(models.Model):
    """ """
    _name = "credit_compte_exploi_amort"
    _description = ""

    libelle_id = fields.Many2one('credit_compte_exploi_amor_lib', string='Libellé', required=False)
    duree = fields.Integer(string='Durée(mois)', required=False)
    valeur = fields.Float(string='Valeur', required=False, digits=(16, 0))

    montant = fields.Float(string='Montant', required=False, compute="calcul_montant", digits=(16, 0))

    compte_exploit = fields.Many2one('credit_compte_exploitation', string='Compte exploitation', required=False)

    @api.depends('valeur', 'duree')
    def calcul_montant(self):
        for val in self:
            if val.duree:
                val.montant = round(val.valeur / val.duree)
            else:
                val.montant = 0

class CreditCompteExploitAmortLib(models.Model):
    """ """
    _name = "credit_compte_exploi_amor_lib"
    _description = ""

    name = fields.Char(string='Libellé', required=False)


class CreditCompteExploitImpotTaxe(models.Model):
    """ """
    _name = "credit_compte_exploi_impot"
    _description = ""

    libelle_id = fields.Many2one('credit_compte_exploi_impot_lib', string='Libellé', required=False)
    quantite = fields.Integer(string='Qte', required=False)
    prix_unite = fields.Float(string='Pu', required=False, digits=(16, 0))
    montant = fields.Float(string='Montant', required=False, compute="calcul_montant", digits=(16, 0))

    compte_exploit = fields.Many2one('credit_compte_exploitation', string='Compte exploitation', required=False)

    @api.depends('quantite', 'prix_unite')
    def calcul_montant(self):
        for val in self:
            val.montant = val.quantite * val.prix_unite

class CreditCompteExploitImpotTaxeLib(models.Model):
    """ """
    _name = "credit_compte_exploi_impot_lib"
    _description = ""

    name = fields.Char(string='Libellé', required=False)


class CreditCompteExploitFrais(models.Model):
    """ """
    _name = "credit_compte_exploi_frais"
    _description = ""

    libelle_id = fields.Many2one('credit_compte_exploi_frais_lib', string='Libellé', required=False)
    nbr_tranche = fields.Integer(string='Nbr. tranche(mois)', required=False, readonly="0")
    mnt_dmde = fields.Float(string='Mnt dmdé.', required=False, digits=(16, 0))
    montant = fields.Float(string='Montant', required=False, compute="calcul_montant", digits=(16, 0))

    compte_exploit = fields.Many2one('credit_compte_exploitation', string='Compte exploitation', required=False)

    @api.depends('mnt_dmde', 'nbr_tranche')
    def calcul_montant(self):
        for val in self:
            if val.nbr_tranche:
                val.montant = round(val.mnt_dmde / val.nbr_tranche)
            else:
                val.montant = 0

class CreditCompteExploitFraisLib(models.Model):
    """ """
    _name = "credit_compte_exploi_frais_lib"
    _description = ""

    name = fields.Char(string='Libellé', required=False)